#!/bin/env bash
#--------------------------------------------
set -Eeuo pipefail
if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
trap stack_trace ERR
function stack_trace() {
  echo -e "\nThe command '$BASH_COMMAND' triggerd a stacktrace:\nStack Trace:"
  for (( i = 1; i < ${#FUNCNAME[@]}; i++ )); do
  echo "    ($i) ${FUNCNAME[$i]:-(top level)} ${BASH_SOURCE[$i]:-(no file)}:${BASH_LINENO[$(( i - 1 ))]}"
  done
}
error(){ printf "\e[1;31m[ERROR]\e[0m %s\n" "${1:-error message missing}" && trap true ERR && return 1; }
warning(){ printf "\e[1;33m[WARNING]\e[0m %s\n" "$1" >&2; }
success(){ printf "\e[1;32m[SUCCESS]\e[0m %s\n" "$1" >&2; }
info(){ printf "\e[1;34m[INFO]\e[0m %s\n" "$1" >&2; }
green(){ if [[ -t 0 ]]; then printf "\e[1;32m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
red(){ if [[ -t 0 ]]; then printf "\e[1;31m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
blue(){ if [[ -t 0 ]]; then printf "\e[1;34m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
export SCRIPT_DIR
#--------------------------------------------
declare -A yggstack_setup_commands
declare -A yggstack_setup_command_descriptions
yggstack:desc(){
  yggstack_setup_commands["$1"]="$1"
  yggstack_setup_command_descriptions["$1"]="$2"
}
declare -A yggstack_setup_aliases
yggstack:alias(){
  yggstack_setup_aliases["$1"]+="|$2"
  yggstack_setup_commands["$2"]="$1"
}
yggstack:desc help "Show this help message"
yggstack:help(){
  case "${1:-list}" in
    */)
      printf "Group Commands for %s:\n" "$(green "${1}")"
      for key in "${!yggstack_setup_command_descriptions[@]}"; do
        if [[ "$key" == "${1}"?* ]]; then
          local name_without_group="${key:${#1}}"
          if [[ ( ! "$name_without_group" == */* ) \
             || "$name_without_group" =~ ^[a-zA-Z0-9]+/$ ]]; then
            if [[ -v yggstack_setup_aliases[$key] ]]; then
              printf "  %s: %s\n" \
                     "$(green "$key${yggstack_setup_aliases[$key]}")" \
                     "${yggstack_setup_command_descriptions[$key]}"
            else
              printf "  %s: %s\n" \
                     "$(green "$key")" \
                     "${yggstack_setup_command_descriptions[$key]}"
            fi
          fi
        fi
      done
      ;;
    list)
      echo "Usage: yggstack [command]"
      echo "Commands:"
      for key in "${!yggstack_setup_command_descriptions[@]}"; do
        if [[ ( ! "$key" == */* ) \
           || "$key" =~ ^[a-zA-Z0-9_.-]+/$ ]]; then
          if [[ -v yggstack_setup_aliases[$key] ]]; then
            printf "  %s: %s\n" \
                   "$(green "$key${yggstack_setup_aliases[$key]}")" \
                   "${yggstack_setup_command_descriptions[$key]}"
          else
            printf "  %s: %s\n" \
                   "$(green "$key")" \
                   "${yggstack_setup_command_descriptions[$key]}"
          fi
        fi
      done
      ;;
    *)
      if [[ -v yggstack_setup_command_descriptions[$1] ]]; then
        printf "Usage: yggstack %s\n" "$(green "$1")"
        if [[ -v yggstack_setup_aliases[$1] ]]; then
          printf "Aliases: %s\n" "$(green "${yggstack_setup_aliases[$1]//|/ }")"
        fi
        printf "%s\n" "${yggstack_setup_command_descriptions[$1]}"
      else
        error "Unknown command: $1"
      fi
      ;;
  esac
}

######################################### Commands ##########################################
yggstack:desc genconf "Generate configuration files for yggdrasil"
yggstack:genconf(){
  if [[ ! -f ~/.cache/yggstack ]]; then
    yggstack:bin/install
  fi
  mkdir -p ~/.config
  ~/.cache/yggstack -genconf -json | jq '.Peers=["tcp://178.27.75.49:6552", "tls://ygg.mkg20001.io:443", "tls://ygg-uplink.thingylabs.io:443"] | .AdminListen = "unix://"+$HOME+"/.config/yggstack.sock"' --arg HOME "$HOME" > ~/.config/yggstack.json
}

yggstack_systemd_service='
[Unit]
Description=Yggstack
After=network.target

[Service]
Type=simple
ExecStart=bash -c '"'source .bashrc && yggstack run'"'
Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target'
yggstack:desc systemd/ "Yggstack systemd commands"
yggstack:desc systemd/init "Initialize systemd services"
yggstack:systemd/init(){
  mkdir -p ~/.config/systemd/user
  echo "$yggstack_systemd_service" > ~/.config/systemd/user/yggstack.service
  systemctl --user daemon-reload
}

yggstack:desc systemd/start "Start systemd services"
yggstack:systemd/start(){
  systemctl --user enable --now yggstack
}

yggstack:desc bin/ "Binary management"
yggstack:desc bin/install "Install yggstack"
yggstack:bin/install(){
  mkdir -p ~/.local/bin
  declare OS ARCH SUFFIX
  OS=$(uname -s | tr '[:upper:]' '[:lower:]')
  SUFFIX=""
  case "$OS" in
    linux) OS=linux;;
    darwin) OS=darwin;;
    android) OS=android;;
    freebsd) OS=freebsd;;
    netbsd) OS=netbsd;;
    openbsd) OS=openbsd;;
    mingw*)
      OS=windows
      SUFFIX=.exe;;
    *) error "Unsupported OS: $(uname -s)";;
  esac
  case "$(uname -m)" in
    x86_64) ARCH=amd64;;
    aarch64) ARCH=arm64;;
    *) error "Unsupported architecture: $(uname -m)";;
  esac
  info "Detected OS: $OS"
  info "Detected ARCH: $ARCH"
  info "Downloading yggstack"
  if command -v wget &> /dev/null; then
    wget -O ~/.cache/yggstack "https://github.com/yggdrasil-network/yggstack/releases/download/trunk/yggstack-$OS-$ARCH$SUFFIX"
  elif command -v curl &> /dev/null; then
    curl -o ~/.cache/yggstack -L "https://github.com/yggdrasil-network/yggstack/releases/download/trunk/yggstack-$OS-$ARCH$SUFFIX"
  else
    error "No download tool found"
  fi
  chmod +x ~/.cache/yggstack
}

yggstack:desc run "Run yggstack"
yggstack:run(){
  if [[ ! -f ~/.cache/yggstack ]]; then
    yggstack:bin/install
  fi
  if [[ ! -f ~/.config/yggstack.json ]]; then
    yggstack:genconf
  fi
  ~/.cache/yggstack -useconffile ~/.config/yggstack.json -exposetcp 22:127.0.0.1:22 -socks 127.0.0.1:7777
}

######################################### Main ##############################################
yggstack:main(){
  if [[ "$(basename "$0")" = "yggstack" ]]; then
    command="${1:-help}"
  else
    command="$(basename "$0")"
  fi
  shift || true
  if [[ "$command" == */ ]]; then
    "yggstack:help" "$command" "$@"
  elif [[ -v yggstack_setup_commands[$command] ]]; then
    "yggstack:${yggstack_setup_commands[$command]}" "$@"
  else
    error "Unknown command: $command"
  fi
}
if [[ $- != *i* ]]; then
  yggstack:main "$@"
fi
