#!/bin/env bash
#--------------------------------------------
set -Eeuo pipefail
if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
trap stack_trace ERR
function stack_trace() {
  echo -e "\nThe command '$BASH_COMMAND' triggerd a stacktrace:\nStack Trace:"
  for (( i = 1; i < ${#FUNCNAME[@]}; i++ )); do
    echo "    ($i) ${FUNCNAME[$i]:-(top level)} ${BASH_SOURCE[$i]:-(no file)}:${BASH_LINENO[$(( i - 1 ))]}"
  done
}
error(){ printf "\e[1;31m[ERROR]\e[0m %s\n" "${1:-error message missing}" && trap true ERR && exit 1; }
warning(){ printf "\e[1;33m[WARNING]\e[0m %s\n" "$1" >&2; }
success(){ printf "\e[1;32m[SUCCESS]\e[0m %s\n" "$1" >&2; }
info(){ printf "\e[1;34m[INFO]\e[0m %s\n" "$1" >&2; }
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
export SCRIPT_DIR
#--------------------------------------------
# deps: fzf xargs find dirname
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      echo "Edit a script file or create a new one from a template"
      echo "Usage: $0 [options] [file]"
      echo "Options:"
      echo "  -h, --help          Show this help message and exit"
      echo "  -c, --cat           Show the content of the file instead of editing it"
      echo "  -d, --description   Edit or view the comment of the file"
      exit 0
      ;;
    -c|--cat)
      cat=true
      ;;
    -d|--description)
      description=true
      ;;
    *)
      file="$1"
      ;;
  esac
  shift
done
if command -v glow >/dev/null; then
  file="${file:-"$(find -L ~/.config/scripts -maxdepth 1 -executable -type f -printf '%P\n' | fzf --preview "test -f {}.md && cat {}.md | glow")"}"
else
  file="${file:-"$(find -L ~/.config/scripts -maxdepth 1 -executable -type f -printf '%P\n' | fzf --preview "test -f {}.md && cat {}.md")"}"
fi
if [[ -n "${description:-}" ]]; then
  file="${file}.md"
fi
if [[ -z "$file" ]]; then exit 0; fi
file_path="$HOME/.config/scripts/$file"
if [[ -n "${cat:-}" ]]; then
  if [[ -f "$file_path" ]]; then
    cat "$file_path"
    exit 0
  else
    exit 0
  fi
fi
if [[ -f "$file_path" ]]; then
  ${EDITOR:-vim} "$file_path"
else
  if [[ -z "${description:-}" ]]; then
    if command -v templates >/dev/null; then
      chosen_template="$(templates list | fzf)"
      rendered_template="$(templates "$chosen_template" --name "$file")"
      echo "$rendered_template" > "$file_path"
      if [[ -z "$chosen_template" ]]; then exit 0; fi
      chmod +x "$file_path"
    fi
  fi
  ${EDITOR:-vim} "$file_path"
  if [[ -z "${description:-}" && \
        -v rendered_template && \
        "$rendered_template" = "$(cat "$file_path")" ]]; then
    warning "Template was not modified, deleting it..."
    rm "$file_path"
  fi
fi
