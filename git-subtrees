#!/bin/env bash
#--------------------------------------------
set -Eeuo pipefail
if [[ -n "${DEBUG:-}" ]]; then
  set -x
fi
trap stack_trace ERR
function stack_trace() {
  echo -e "\nThe command '$BASH_COMMAND' triggerd a stacktrace:\nStack Trace:"
  for (( i = 1; i < ${#FUNCNAME[@]}; i++ )); do
  echo "    ($i) ${FUNCNAME[$i]:-(top level)} ${BASH_SOURCE[$i]:-(no file)}:${BASH_LINENO[$(( i - 1 ))]}"
  done
}
error(){ printf "\e[1;31m[ERROR]\e[0m %s\n" "${1:-error message missing}" && trap true ERR && return 1; }
warning(){ printf "\e[1;33m[WARNING]\e[0m %s\n" "$1" >&2; }
success(){ printf "\e[1;32m[SUCCESS]\e[0m %s\n" "$1" >&2; }
info(){ printf "\e[1;34m[INFO]\e[0m %s\n" "$1" >&2; }
green(){ if [[ -t 0 ]]; then printf "\e[1;32m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
red(){ if [[ -t 0 ]]; then printf "\e[1;31m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
blue(){ if [[ -t 0 ]]; then printf "\e[1;34m%s\e[0m" "$1"; else printf "%s" "$1"; fi }
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
export SCRIPT_DIR
#--------------------------------------------
declare -A git_subtrees__commands
declare -A git_subtrees__command_descriptions
git-subtrees::desc(){
  git_subtrees__commands["$1"]="$1"
  git_subtrees__command_descriptions["$1"]="$2"
}
declare -A git_subtrees__aliases
git-subtrees::alias(){
  git_subtrees__aliases["$1"]+="|$2"
  git_subtrees__commands["$2"]="$1"
}
git-subtrees::desc help "Show this help message"
git-subtrees::help(){
  case "${1:-list}" in
    */)
      printf "Group Commands for %s:\n" "$(green "${1}")"
      for key in "${!git_subtrees__command_descriptions[@]}"; do
        if [[ "$key" == "${1}"?* ]]; then
          local name_without_group="${key:${#1}}"
          if [[ ( ! "$name_without_group" == */* ) \
             || "$name_without_group" =~ ^[a-zA-Z0-9]+/$ ]]; then
            if [[ -v git_subtrees__aliases[$key] ]]; then
              printf "  %s: %s\n" \
                     "$(green "$key${git_subtrees__aliases[$key]}")" \
                     "${git_subtrees__command_descriptions[$key]}"
            else
              printf "  %s: %s\n" \
                     "$(green "$key")" \
                     "${git_subtrees__command_descriptions[$key]}"
            fi
          fi
        fi
      done
      ;;
    list)
      echo "Usage: git-subtrees [command]"
      echo "Commands:"
      for key in "${!git_subtrees__command_descriptions[@]}"; do
        if [[ ( ! "$key" == */* ) \
           || "$key" =~ ^[a-zA-Z0-9_.-]+/$ ]]; then
          if [[ -v git_subtrees__aliases[$key] ]]; then
            printf "  %s: %s\n" \
                   "$(green "$key${git_subtrees__aliases[$key]}")" \
                   "${git_subtrees__command_descriptions[$key]}"
          else
            printf "  %s: %s\n" \
                   "$(green "$key")" \
                   "${git_subtrees__command_descriptions[$key]}"
          fi
        fi
      done
      ;;
    *)
      if [[ -v git_subtrees__command_descriptions[$1] ]]; then
        printf "Usage: git-subtrees %s\n" "$(green "$1")"
        if [[ -v git_subtrees__aliases[$1] ]]; then
          printf "Aliases: %s\n" "$(green "${git_subtrees__aliases[$1]//|/ }")"
        fi
        printf "%s\n" "${git_subtrees__command_descriptions[$1]}"
      else
        error "Unknown command: $1"
      fi
      ;;
  esac
}

git-subtrees(){
  local base_zero
  base_zero="$(basename "$0")"
  if [[ "$base_zero" = "git-subtrees" ]]; then
    command="${1:-help}"
    shift || true
  else
    command="$base_zero"
  fi
  if [[ "$command" == */ ]]; then
    "git-subtrees::help" "$command" "$@"
  elif [[ -v git_subtrees__commands[$command] ]]; then
    "git-subtrees::${git_subtrees__commands[$command]}" "$@"
  else
    error "Unknown command: $command"
  fi
}

######################################### Commands ##########################################
git-subtrees::desc add "Add a new subtree"
git-subtrees::add(){
  local subtree_prefix subtree_url commit squash no_clone subtree_branch
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        echo "Usage: git-subtrees add [options] <subtree-prefix> <subtree-url> <opt-subtree-branch>"
        echo "Options:"
        echo "  -h, --help: Show this help message"
        echo "  -c, --commit: Commit the changes to .subtrees"
        echo "  -s, --squash: Squash the commits from the subtree"
        echo "  -n, --no-clone: Do not clone the subtree, only add to .subtrees"
        return 0
        ;;
      -c|--commit)
        commit="true"
        ;;
      -s|--squash)
        squash="true"
        ;;
      -n|--no-clone)
        no_clone="true"
        ;;
      *)
        if [[ -z "${subtree_prefix:-}" ]]; then
          subtree_prefix="$1"
        elif [[ -z "${subtree_url:-}" ]]; then
          subtree_url="$1"
        elif [[ -z "${subtree_branch:-}" ]]; then
          subtree_branch="$1"
        else
          error "Unknown argument: $1"
        fi
        ;;
    esac
    shift
  done
  subtree_branch="${subtree_branch:-main}"
  if [[ -z "${subtree_prefix:-}" ]]; then
    error "Missing argument: <subtree-prefix>"
  fi
  if [[ -z "${subtree_url:-}" ]]; then
    error "Missing argument: <subtree-url>"
  fi
  git_root="$(git rev-parse --show-toplevel)"
  local json
  if [[ -n "${squash:-}" ]]; then
    json="$(jq --compact-output --sort-keys -n --arg prefix "$subtree_prefix" --arg url "$subtree_url" --arg ref "$subtree_branch" \
        '{remote: $url, prefix: $prefix, ref: $ref, squash: true}')"
  else
    json="$(jq --compact-output --sort-keys -n --arg prefix "$subtree_prefix" --arg url "$subtree_url" --arg ref "$subtree_branch" \
        '{remote: $url, prefix: $prefix, ref: $ref}')"
  fi
  # Check if a subtree is already registered at path
  if [[ -f  "$git_root/.subtrees" ]]; then
    existing_at_path="$(jq -c --arg prefix "$subtree_prefix" 'select(.prefix == $prefix)' "$git_root/.subtrees")"
    if [[ -n "$existing_at_path" ]]; then
      echo "Existing subtrees at path:"
      echo "$existing_at_path" | jq
      error "Subtree already exists at path: $subtree_prefix"
    fi
  fi
  # Check if a subtree is already registered at prefix
  if [[ -z "${no_clone:-}" ]]; then
    if [[ -e "$git_root/$subtree_prefix" ]]; then
      error "Path already exists: $git_root/$subtree_prefix"
    fi
  fi
  # Try to add the subtree
  if [[ -z "${no_clone:-}" ]]; then
    if [[ -n "${squash:-}" ]]; then
      git subtree add --prefix="$subtree_prefix" "$subtree_url" "$subtree_branch" --squash
    else
      git subtree add --prefix="$subtree_prefix" "$subtree_url" "$subtree_branch"
    fi
  fi
  # Add the subtree to the .subtrees file
  echo "$json" >> "$git_root/.subtrees"
  if [[ -n "${commit:-}" ]]; then
    git add "$git_root/.subtrees"
    git commit -m "Add subtree: $subtree_prefix"
  fi
}

git-subtrees::desc remove "Remove a subtree"
git-subtrees::remove(){
  error "Not implemented"
}

git-subtrees::desc list "List all subtrees"
git-subtrees::list(){
  error "Not implemented"
}

git-subtrees::desc pull "Pull changes from a subtree"
git-subtrees::pull(){
  declare git_root prev_dir subtrees
  prev_dir="$(pwd)"
  git_root="$(git rev-parse --show-toplevel)"
  subtrees=()
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        echo "Usage: git-subtrees pull [options] <opt-subtree-prefix> ..."
        echo "Options:"
        echo "  -h, --help: Show this help message"
        echo "  -a, --all: Pull all subtrees"
        return 0
        ;;
      -a|--all)
        subtrees=()
        while IFS=$'\n' read -r line; do
          subtrees+=("$line")
        done < <(jq -r '.prefix' "$git_root/.subtrees")
        ;;
      *)
        subtrees+=("$1")
        ;;
    esac
    shift
  done
  cd "$git_root" || error "Failed to change to git root"
  for subtree_prefix in "${subtrees[@]}"; do
    local subtree
    subtree="$(jq -c --arg prefix "$subtree_prefix" 'select(.prefix == $prefix)' "$git_root/.subtrees")"
    info "Subtree: $subtree_prefix"
    info "Config: $subtree"
    if [[ -z "$subtree" ]]; then
      error "Subtree not found: $subtree_prefix"
    fi
    declare subtree_remote subtree_branch subtree_squash subtree_rejoin
    subtree_remote="$(jq -r '.remote' <<< "$subtree")"
    subtree_branch="$(jq -r '.ref' <<< "$subtree")"
    subtree_squash="$(jq -r '.squash' <<< "$subtree")"
    if [[ -n "${subtree_squash:-}" && "$subtree_squash" = "true" ]]; then
      subtree_push_args+=(--squash)
    fi
    info "Pulling subtree: $subtree_prefix to $subtree_remote -> $subtree_branch with extra args: ${subtree_push_args[*]}"
    git subtree pull --prefix="$subtree_prefix" "$subtree_remote" "$subtree_branch" "${subtree_push_args[@]}"

  done
}

git-subtrees::desc push "Push changes to a subtree"
git-subtrees::push(){
  declare git_root prev_dir subtrees
  prev_dir="$(pwd)"
  git_root="$(git rev-parse --show-toplevel)"
  subtrees=()
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -h|--help)
        echo "Usage: git-subtrees push [options] <opt-subtree-prefix> ..."
        echo "Options:"
        echo "  -h, --help: Show this help message"
        echo "  -a, --all: Push all subtrees"
        return 0
        ;;
      -a|--all)
        subtrees=()
        while IFS=$'\n' read -r line; do
          subtrees+=("$line")
        done < <(jq -r '.prefix' "$git_root/.subtrees")
        ;;
      *)
        subtrees+=("$1")
        ;;
    esac
    shift
  done
  cd "$git_root" || error "Failed to change to git root"
  for subtree_prefix in "${subtrees[@]}"; do
    local subtree
    subtree="$(jq -c --arg prefix "$subtree_prefix" 'select(.prefix == $prefix)' "$git_root/.subtrees")"
    echo "Subtree: $subtree_prefix"
    echo "Config: $subtree"
    if [[ -z "$subtree" ]]; then
      error "Subtree not found: $subtree_prefix"
    fi
    declare subtree_remote subtree_branch subtree_squash subtree_rejoin
    subtree_remote="$(jq -r '.remote' <<< "$subtree")"
    subtree_branch="$(jq -r '.ref' <<< "$subtree")"
    subtree_squash="$(jq -r '.squash' <<< "$subtree")"
    subtree_rejoin="$(jq -r '.rejoin' <<< "$subtree")"
    if [[ -n "${subtree_rejoin:-}" && "$subtree_rejoin" = "true" ]]; then
      subtree_push_args+=(--rejoin)
    fi
    info "Pushing subtree: $subtree_prefix to $subtree_remote -> $subtree_branch with extra args: ${subtree_push_args[*]}"
    git subtree push --prefix="$subtree_prefix" "$subtree_remote" "$subtree_branch" "${subtree_push_args[@]}"
  done

  cd "$prev_dir" || error "Failed to change back to previous directory"
}

# Run main if not sourced
if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
    git-subtrees "$@"
fi
