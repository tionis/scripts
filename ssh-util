#!/bin/env bash
#--------------------------------------------
set -Eeuo pipefail
if [[ -n "${DEBUG:-}" ]]; then
	set -x
fi
trap stack_trace ERR
function stack_trace() {
	echo -e "\nThe command '$BASH_COMMAND' triggerd a stacktrace:\nStack Trace:"
	for ((i = 1; i < ${#FUNCNAME[@]}; i++)); do
		echo "    ($i) ${FUNCNAME[$i]:-(top level)} ${BASH_SOURCE[$i]:-(no file)}:${BASH_LINENO[$((i - 1))]}"
	done
}
error() { printf "\e[1;31m[ERROR]\e[0m %s\n" "${1:-error message missing}" && trap true ERR && return 1; }
warning() { printf "\e[1;33m[WARNING]\e[0m %s\n" "$1" >&2; }
success() { printf "\e[1;32m[SUCCESS]\e[0m %s\n" "$1" >&2; }
info() { printf "\e[1;34m[INFO]\e[0m %s\n" "$1" >&2; }
green() { if [[ -t 0 ]]; then printf "\e[1;32m%s\e[0m" "$1"; else printf "%s" "$1"; fi; }
red() { if [[ -t 0 ]]; then printf "\e[1;31m%s\e[0m" "$1"; else printf "%s" "$1"; fi; }
blue() { if [[ -t 0 ]]; then printf "\e[1;34m%s\e[0m" "$1"; else printf "%s" "$1"; fi; }
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
export SCRIPT_DIR
#--------------------------------------------
declare -A ssh_util__commands
declare -A ssh_util__command_descriptions
ssh-util::desc() {
	ssh_util__commands["$1"]="$1"
	ssh_util__command_descriptions["$1"]="$2"
}
declare -A ssh_util__aliases
ssh-util::alias() {
	ssh_util__aliases["$1"]+="|$2"
	ssh_util__commands["$2"]="$1"
}
ssh-util::desc help "Show this help message"
ssh-util::help() {
	case "${1:-list}" in
	*/)
		printf "Group Commands for %s:\n" "$(green "${1}")"
		for key in "${!ssh_util__command_descriptions[@]}"; do
			if [[ "$key" == "${1}"?* ]]; then
				local name_without_group="${key:${#1}}"
				if [[ (! "$name_without_group" == */*) ||
					"$name_without_group" =~ ^[a-zA-Z0-9]+/$ ]]; then
					if [[ -v ssh_util__aliases[$key] ]]; then
						printf "  %s: %s\n" \
							"$(green "$key${ssh_util__aliases[$key]}")" \
							"${ssh_util__command_descriptions[$key]}"
					else
						printf "  %s: %s\n" \
							"$(green "$key")" \
							"${ssh_util__command_descriptions[$key]}"
					fi
				fi
			fi
		done
		;;
	list)
		echo "Usage: ssh-util [command]"
		echo "Commands:"
		for key in "${!ssh_util__command_descriptions[@]}"; do
			if [[ (! "$key" == */*) ||
				"$key" =~ ^[a-zA-Z0-9_.-]+/$ ]]; then
				if [[ -v ssh_util__aliases[$key] ]]; then
					printf "  %s: %s\n" \
						"$(green "$key${ssh_util__aliases[$key]}")" \
						"${ssh_util__command_descriptions[$key]}"
				else
					printf "  %s: %s\n" \
						"$(green "$key")" \
						"${ssh_util__command_descriptions[$key]}"
				fi
			fi
		done
		;;
	*)
		if [[ -v ssh_util__command_descriptions[$1] ]]; then
			printf "Usage: ssh-util %s\n" "$(green "$1")"
			if [[ -v ssh_util__aliases[$1] ]]; then
				printf "Aliases: %s\n" "$(green "${ssh_util__aliases[$1]//|/ }")"
			fi
			printf "%s\n" "${ssh_util__command_descriptions[$1]}"
		else
			error "Unknown command: $1"
		fi
		;;
	esac
}

ssh-util() {
	local base_zero
	base_zero="$(basename "$0")"
	if [[ "$base_zero" = "ssh-util" ]]; then
		command="${1:-help}"
		shift || true
	else
		command="$base_zero"
	fi
	if [[ "$command" == */ ]]; then
		"ssh-util::help" "$command" "$@"
	elif [[ -v ssh_util__commands[$command] ]]; then
		"ssh-util::${ssh_util__commands[$command]}" "$@"
	else
		error "Unknown command: $command"
	fi
}

######################################### Ideas #############################################
# Introduce cert management with some renewal mechanisms
# renewal mechanosm should work via a cronjob and not depend on the current key being trusted
# furthermore it should be async as ssh has no intermmediate CAs, which means I have to sign
# all cert with my yuikey myself


######################################### Helpers ##########################################
SSH_UTIL__DEFAULT_GPG_KEY=60677752BBD86A715AA57BD9A073EA3B1AC3CA70
ssh-util::first-that-exists() {
	for file in "$@"; do
		if [[ -e "$file" ]]; then
			echo "$file"
			return 0
		fi
	done
	echo "[not found]"
}

ssh-util::join_by() {
	local d=${1-} f=${2-}
	if shift 2; then
		printf %s "$f" "${@/#/$d}"
	fi
}

ssh-util::regex_escape() {
	sed 's/[^^]/[&]/g; s/\^/\\^/g' <<<"$1"
}

######################################### Commands ##########################################
ssh-util::desc sign/ "SSH Signing operations"
ssh-util::desc sign/file "Sign a file with a public ssh key"
ssh-util::sign/file() {
	local key namespace files
	namespace="file"
	files=()
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
		--help | -h)
			echo "Usage: ssh-util sign/file [options] <files>"
			echo "Options:"
			echo "  --key <key>, -k <key> Specify the key to use for signing"
			echo "  --namespace <namespace>, -n <namespace> Namespace for the signature, defaults to '$namespace'"
			return 0
			;;
		--key | -k)
			key="$2"
			shift
			;;
		--namespace | -n)
			namespace="$2"
			shift
			;;
		*)
			files+=("$1")
			;;
		esac
		shift
	done
	if [[ -z "${files[*]:-}" ]]; then
		echo "No files specified"
		return 1
	fi
	if [[ -z "${key:-}" ]]; then
		if [[ -n "${SSH_AUTH_SOCK:-}" ]]; then
			local tmp_dir
			tmp_dir="$(mktemp -d)"
			mkfifo "$tmp_dir/fifo"
			ssh-add -L | head -n 1 >"$tmp_dir/fifo" &
			for file in "${files[@]}"; do
				ssh-keygen -Y sign -f "$tmp_dir/fifo" -n "$namespace" "$file"
			done
			rm -r "$tmp_dir"
			return
		else
			key="$HOME/.ssh/id_ed25519.pub"
		fi
	fi
	for file in "${files[@]}"; do
		ssh-keygen -Y sign -f "$key" -n "$namespace" "$file"
	done
}

ssh-util::desc sign/json "Sign a string and output it as json"
ssh-util::sign/json() {
	local key namespace
	namespace="tionis.dev/json-ssh-sig"
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
		--help | -h)
			echo "Usage: ssh-util sign/json [options] <string>"
			echo "Options:"
			echo "  --key <key>, -k <key> Specify the key to use for signing"
			echo "  --namespace <namespace>, -n <namespace> Namespace for the signature, defaults to 'tionis.dev/json-ssh-sig'"
			return 0
			;;
		--key | -k)
			key="$2"
			shift
			;;
		--namespace | -n)
			namespace="$2"
			shift
			;;
		*)
			break
			;;
		esac
		shift
	done
	local signed input
	input="$(cat)"
	if [[ -z "${key:-}" ]]; then
		if [[ -n "${SSH_AUTH_SOCK:-}" ]]; then
			local tmp_dir
			tmp_dir="$(mktemp -d)"
			mkfifo "$tmp_dir/fifo"
			ssh-add -L | head -n 1 >"$tmp_dir/fifo" &
			signed="$(printf "%s" "$input" | ssh-keygen -Y sign -f "$tmp_dir/fifo" -n "$namespace")"
			rm -r "$tmp_dir"
		else
			key="$HOME/.ssh/id_ed25519.pub"
		fi
	fi
	if [[ -z "${signed:-}" ]]; then
		signed="$(printf "%s" "$input" | ssh-keygen -Y sign -f "$key" -n "$namespace")"
	fi
	jq -nSc '{data: $input, signature: $signed}' --arg input "$input" --arg signed "$signed"
}

ssh-util::desc verify/ "SSH Signature verification operations"
ssh-util::desc verify/json "verify a signature encoded in json"
ssh-util::verify/json() {
	local allowed_signers namespace identity print_data
	namespace="tionis.dev/json-ssh-sig"
	allowed_signers="$HOME/.ssh/allowed_signers"
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
		--help | -h)
			echo "Usage: ssh-util verify/json [options]"
			echo "json object is read from stdin"
			echo "Options:"
			echo "  --allowed-signers <path>, -a <path> Path to a file containing allowed signers, defaults to ~/.ssh/allowed_signers"
			echo "  --identity <identity>, -I <identity> Identity to use for verification"
			echo "  --namespace <namespace>, -n <namespace> Namespace for the signature, defaults to 'tionis.dev/json-ssh-sig'"
			echo "  --print, -p Print the data that was signed, if the signature was verified"
			return 0
			;;
		--allowed-signers | -a)
			allowed_signers="$2"
			shift
			;;
		--identity | -I)
			identity="$2"
			shift
			;;
		--namespace | -n)
			namespace="$2"
			shift
			;;
		--print | -p)
			print_data=true
			;;
		*)
			break
			;;
		esac
		shift
	done
	if [[ -z "${identity:-}" ]]; then
		echo "Identity is required"
		return 1
	fi

	local input
	input="$(cat)"
	local data signature
	data="$(jq -r '.data' <<<"$input")"
	signature="$(jq -r '.signature' <<<"$input")"
	printf "%s" "$data" | ssh-keygen -Y verify -f "$allowed_signers" -n "$namespace" -s <(echo "$signature") -I "$identity" >&2
	if [[ -n "${print_data:-}" ]]; then
		printf "%s" "$data"
	fi
}

ssh-util::desc rssh "Create a reverse tunnel to this machine"
ssh-util::rssh(){
	SSH_AUTH_SOCK="" # use simple machine key
	while true; do
		if command -v entr >/dev/null; then
			echo "$HOME/.ssh/authorized_keys" | entr -nr ssh -R "${NODE_NAME:-$(hostname)}:22:localhost:22" nue.tuns.sh tcp-alias-allowed-users="$(while IFS=$'\n' read -r pubkey; do ssh-keygen -l -f <(echo "$pubkey"); done < <(< ~/.ssh/authorized_keys grep -v '^#') | grep -oP 'SHA256:[^ ]+' | tr '\n' ',' | sed 's/,$/\n/')"
		else
			ssh -R "${NODE_NAME:-$(hostname)}:22:localhost:22" nue.tuns.sh tcp-alias-allowed-users="$(while IFS=$'\n' read -r pubkey; do ssh-keygen -l -f <(echo "$pubkey"); done < <(< ~/.ssh/authorized_keys grep -v '^#') | grep -oP 'SHA256:[^ ]+' | tr '\n' ',' | sed 's/,$/\n/')"
		fi
		sleep 5
	done
}

ssh-util::desc sshuttle/ "Use sshuttle to create a VPN"
ssh-util::desc sshuttle/enable "Enable the peudo VPN"
ssh-util::sshuttle/enable() {
	local host=citadel
  while [[ "$#" -gt 0 ]]; do
		case "$1" in
		--help | -h)
			echo "Usage: ssh-util sshuttle/enable [options]"
			echo "Options:"
			echo "  --host <host>, -h <host> Specify the host to connect to"
			return 0
			;;
		--host | -h)
			host="$2"
			shift
			;;
		*)
			break
			;;
		esac
		shift
	done
	sshuttle --dns --daemon "--pidfile=${XDG_CACHE_DIR:-$HOME/.cache}/sshuttle.pid" -r "$host" 0/0
}

ssh-util::desc sshuttle/disable "Disable the pseudo VPN"
ssh-util::sshuttle/disable() {
	#sshuttle --daemon "--pidfile=${XDG_CACHE_DIR:-$HOME/.cache}/sshuttle.pid" --stop
	if [[ -f "${XDG_CACHE_DIR:-$HOME/.cache}/sshuttle.pid" ]]; then
		kill "$(cat "${XDG_CACHE_DIR:-$HOME/.cache}/sshuttle.pid")"
		rm "${XDG_CACHE_DIR:-$HOME/.cache}/sshuttle.pid"
	fi
}

ssh-util::desc tpm/setup "Setup a TPM based ssh key"
ssh-util::tpm/setup() {
	declare USER PIN SOPIN
	if ! command -v tpm2_ptool >/dev/null; then
		echo "tpm2tool not installed, please install it via your package manager"
		echo "e.g.: sudo pacman -S tpm2-pkcs11 tpm2-tools"
		return 1
	fi
	USER="$(id -nu)"
	if ! getent group tss | cut -d: -f4 | grep -w "^$USER\$" >/dev/null; then
		echo "User not in tss group, adding you now..."
		sudo usermod -a -G tss "$USER"
		echo "Please reboot/relogin"
		return 1
	fi
	echo "Please define a user password:"
	read -r PIN
	echo "Please define a supervisor password (defaults to user password if empty):"
	read -r SOPIN
	if test -z "$SOPIN"; then
		SOPIN="$PIN"
	fi
	tpm2_ptool init
	tpm2_ptool addtoken --pid=1 --label=ssh "--userpin=$PIN" "--sopin=$SOPIN"
	tpm2_ptool addkey --label=ssh "--userpin=$PIN" --algorithm=ecc256
}

#ssh-util::desc with-key "Run a command with a specific ssh key"
ssh_util__commands[with - key]="with-key"
ssh-util::with-key() {
	key="$1"
	shift || true
	ssh -o "IdentitiesOnly=yes" -i "$key" "$@"
}

ssh-util::desc tpm/sign "Sign a file with a TPM based ssh key"
ssh-util::tpm/sign() {
	declare pub
	pub="$(ssh-add -L | grep libtpm2 | head -n 1)"
	if [[ ! -f ~/.ssh/tpm.pub ]]; then
		if [[ "$pub" != "$(cat ~/.ssh/tpm/pub)" ]]; then
			warning "TPM public key has changed"
		else
			echo "$pub" >~/.ssh/tpm.pub
			success "TPM public key cached"
		fi
	#else
	#  success "TPM public key already cached"
	fi
	ssh-keygen -Y sign -f ~/.ssh/tpm.pub -n file "$@"
}

ssh-util::desc tpm/ssh-keygen "use ssh-keygen with the tpm library loaded"
ssh-util::tpm/ssh-keygen() {
	if [[ -f /usr/lib/pkcs11/libtpm2_pkcs11.so ]]; then
		ssh-keygen -D /usr/lib/pkcs11/libtpm2_pkcs11.so "$@"
	elif [[ -f /usr/lib/x86_64-linux-gnu/libtpm2_pkcs11.so.1 ]]; then
		ssh-keygen -D /usr/lib/x86_64-linux-gnu/libtpm2_pkcs11.so.1 "$@"
	else
		error "libtpm2 library not found"
	fi
}

ssh-util::desc fun/send-mic "Send your microphone to a remote host"
ssh-util::fun/send-mic() {
	arecord -f dat - | ssh "$@" "aplay -"
}

ssh-util::desc fun/telephone "Use ssh as a primitive telephone"
ssh-util::fun/telephone() {
	ssh "$@" "pulseaudio -D; arecord -f dat -" | aplay - &
	local pid1=$!
	arecord -f dat - | ssh "$@" "aplay -" &
	local pid2=$!
	trap 'echo "Stopping $pid1 and $pid2 ..."; kill -s INT "$pid1" "$pid2"' INT
	wait "$pid1" "$pid2"
}

ssh-util::desc fido/ "FIDO2 operations"
ssh-util::desc fido/import "Import a FIDO2 key into ssh"
ssh-util::fido/import() {
	cd ~/.ssh
	(
		umask 066
		ssh-keygen -K
	)
	cd - >/dev/null
}

ssh-util::desc authorized_keys/ "Manage authorized_keys"
ssh-util::desc authorized_keys/fetch "Fetch authorized_keys updates"
ssh-util::authorized_keys/fetch() {
	local stream=false
	while [[ "$#" -gt 0 ]]; do
		case "$1" in
			--help | -h)
				echo "Usage: ssh-util authorized_keys/fetch [options]"
				echo "Options:"
				echo "  --help, -h Show this help message"
				echo "  --stream, -s Keep connection active and fetch key updates"
				;;
			--stream | -s)
				stream=true
				;;
			*)
				echo "Unknown option: $1"
				return 1
				;;
		esac
		shift
	done
	# TODO when stream=true, watch ~/.ssh/authorized_nostr_keys for updates and also keep nostr connection active to handle key updates
	error "Not implemented yet"
}

ssh-util::desc cert/ "SSH Certificate operations"
ssh-util::desc cert/info "Get information about a ssh certificate"
ssh-util::cert/info(){
	ssh-keygen -L -f "${1:-"$HOME/.ssh/id_ed25519-cert.pub"}" || error "Failed to show certificate information"
}

ssh-util::desc cert/info "More information about a ssh certificate"
ssh-util::desc cert/info/get_principals "Get the principals from a ssh certificate"
ssh-util::cert/info/get_principals() {
	#ssh-keygen -L -f "${1:-"$HOME/.ssh/id_ed25519-cert.pub"}" | grep 'Principals:' | sed 's/Principals: //g' | tr ',' '\n'
	while read -r line; do
		if [[ "$(echo "$line" | awk '{$1=$1;print}')" == "Principals:" ]]; then
			while read -r line; do
				if [[ -z "$line" || "$(echo "$line" | awk '{print $1 $2}')" = "CriticalOptions:" ]]; then
					break
				fi
				echo "$line"
			done
		fi
	done
}

ssh-util::desc cert/sign "Sign a ssh certificate"
ssh-util::cert/sign(){
  local LIBYYKCS TIME KEY IDENTIFIER PRINCIPAL_STRING HOST_CERT
	LIBYKCS=$(ssh-util::first-that-exists "/usr/lib/libykcs11.so" "/opt/local/lib/libykcs11.dylib" "/usr/local/lib/libykcs11.dylib" "/usr/lib/x86_64-linux-gnu/libykcs11.so" "/usr/lib/x86_64-linux-gnu/libykcs11.so")
	TIME="${TIME:-+1h}"
	KEY="${KEY:-$HOME/.ssh/id_ed25519.pub}"
	IDENTIFIER="${IDENTIFIER:-$(hostname --fqdn))}"
	PRINCIPAL_STRING="${PRINCIPAL_STRING:-}"
	HOST_CERT="${HOST:-}"
	while [[ "$#" -gt 0 ]]; do
		case "${1:-}" in
		--help)
			echo "Usage: cert sign [options]"
			echo "Options:"
			echo "  --help: show this help message"
			echo "  -t <time>, --time <time>: validity time of the certificate, default: $TIME"
			echo "  -p <principal>, --principal <principal>: add principal to principals list"
			echo "  -P <principals>, --principals <principals>: overwrite the principals list using a comma separated list"
			echo "  -i <identifier>, --identifier <identifier>: identifier to use for the certificate, defaults to $IDENTIFIER"
			echo "  -k <key>, --key <key>: key to sign, defaults to ~/.ssh/id_ed25519"
			echo "  -O <option>, --option <option>: option to add to the cert"
			echo "  -h, --host: sign a host key instead of a user key"
			echo "  -o, --output <file>: file to write the certificate to, defaults to <key>-cert.pub, - for stdout"
			echo "  --libykcs <path>: location of dynamic lib for libykcs11 (for yubikey support), defaults to $LIBYKCS"
			echo "  -g, --gpg: sign using gpg-agent instead of ssh-agent"
			echo "  --gpg-key <key>: key to use for gpg-agent, defaults to me@tionis.dev's gpg key"
			echo "  -y, --yubikey: use yubikey for signing, defaults to not using yubikey"
			echo "  --allowed_signers <path>: path to a file containing allowed signers, defaults to ~/.ssh/allowed_signers"
			echo "                            (this is used to find valid CAs to sign with)"
			echo "  -n, --name <name>: name of the CA to use for signing, defaults to trying all until one signs the cert"
			;;
		-g | --gpg)
			USE_GPG=true
			shift
			;;
		--gpg-key)
			GPG_SSH_KEY="$2"
			shift 2
			;;
		--libykcs)
			LIBYKCS="$2"
			shift 2
			;;
		-y | --yubikey)
			USE_YUBIKEY="$2"
			shift
			;;
		--allowed_signers)
			ALLOWED_SIGNERS="$2"
			shift 2
			;;
		-n | --name)
			CA_NAME="$2"
			shift 2
			;;
		-t | --time)
			TIME="$2"
			shift 2
			;;
		-p | --principal)
			PRINCIPALS+=("$2")
			shift 2
			;;
		-P | --principals)
			PRINCIPAL_STRING="$2"
			shift 2
			;;
		-h | --host)
			HOST_CERT=true
			shift
			;;
		-i | --identifier)
			IDENTIFIER="$2"
			shift 2
			;;
		-k | --key)
			KEY="$2"
			shift 2
			;;
		-O | --option)
			OPTIONS+=("$2")
			shift 2
			;;
		-o | --output)
			OUTPUT="$2"
			shift 2
			;;
		*)
			error "Unknown option: $1"
			;;
		esac
	done
	# CREATE OPTIONS
	local opt_args=()
	for opt in "${OPTIONS[@]}"; do
		opt_args+=("-O" "$opt")
	done
	if [[ -z "${PRINCIPAL_STRING:-}" ]]; then
		PRINCIPAL_STRING="$(ssh-util::join_by , "${PRINCIPALS[@]}")"
	fi
	if [[ "$KEY" == "-" ]]; then
		tmp_dir="${tmp_dir:-$(mktemp -d)}"
		KEY="$tmp_dir/key.pub"
		cat >"$KEY"
	fi
	if [[ -n "${OUTPUT:-}" ]]; then
		tmp_dir="${tmp_dir:-$(mktemp -d)}"
		if [[ "$KEY" != "$tmp_dir/key.pub" ]]; then
			cp "$KEY" "$tmp_dir/key.pub"
		fi
		KEY="$tmp_dir/key.pub"
	fi
	keygen_args=()
	if [[ -n "${HOST_CERT:-}" ]]; then
		keygen_args+=("-h")
	fi
	keygen_args+=("-I" "$IDENTIFIER" "-n" "$PRINCIPAL_STRING" "-V" "$TIME" "${opt_args[@]}" "$KEY")
	if [[ -n "${USE_GPG:-}" ]]; then
		OLD_SSH_AUTH_SOCK="$SSH_AUTH_SOCK"
		if command -v okc-ssh-agent >/dev/null; then
			eval "$(okc-ssh-agent)" >/dev/null
			KILL_AGENT=true
		else
			if ! gpg --list-keys "$SSH_UTIL__DEFAULT_GPG_KEY" >/dev/null; then
				gpg --recv-keys "$SSH_UTIL__DEFAULT_GPG_KEY"
			fi
			SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
		fi
		export SSH_AUTH_SOCK
		(
			umask 077
			ssh-keygen -Us <(echo "${GPG_SSH_KEY:-"$(gpg --export-ssh-key '<me@tionis.dev>')"}") "${keygen_args[@]}"
		)
		SSH_AUTH_SOCK="$OLD_SSH_AUTH_SOCK"
		if [[ -n "${KILL_AGENT:-}" ]]; then
			kill "$SSH_AGENT_PID"
		fi
	elif [[ -n "${USE_YUBIKEY:-}" ]]; then
		# TODO try all the ca from sigchain
		if [[ -n "${CA_NAME:-}" ]]; then
			SAFE_NAME="$(ssh-util::regex_escape "$CA_NAME")"
			key=$(grep cert-authority <"$ALLOWED_SIGNERS" | awk '{print $(NF-2),$(NF-1),$(NF)}' | grep "$SAFE_NAME\$")
			if [[ -n "$key" ]]; then
				(
					umask 077
					ssh-keygen -s <(echo "$key") "${keygen_args[@]}"
				)
			else
				error "No valid CA found for $CA_NAME"
			fi
		else
			while read -r line; do
				(
					umask 077
					ssh-keygen -s <(echo "$line") "${keygen_args[@]}"
				) && return 0
			done < <(grep cert-authority <"$ALLOWED_SIGNERS" | awk '{print $(NF-2),$(NF-1),$(NF)}')
		fi
	else
		ssh-keygen -Us <(echo "${SSH_AGENT_SSH_KEY:-"$(ssh-add -L | head -n 1)"}") "${keygen_args[@]}"
	fi
	if [[ -n "${OUTPUT:-}" ]]; then
		if [[ "$OUTPUT" == "-" ]]; then
			cat "$tmp_dir/key-cert.pub"
			rm -r "$tmp_dir"
		else
			cp "$tmp_dir/key-cert.pub" "$OUTPUT"
			rm -r "$tmp_dir"
		fi
	fi
}

ssh-util::desc cert/info "Get information about a ssh certificate"
ssh-util::cert/info() {
	ssh-keygen -L -f "${1:-"$HOME/.ssh/id_ed25519-cert.pub"}" || error "Failed to show certificate information"
}

ssh-util::desc cert/renew "Renew a ssh certificate"
ssh-util::cert/renew() {
	error "Not implemented"
	# TODO connect this to nostr solution?
	# or add ssh-cert signer in the cloud?
	file="$HOME/.ssh/id_ed25519-cert.pub"
	key_file="$HOME/.ssh/id_ed25519"
	while [[ "$#" -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			echo "Usage: cert renew [options]"
			echo "Options:"
			echo "  -c, --cert <cert>: certificate to renew, defaults to ~/.ssh/id_ed25519-cert.pub"
			echo "  -k, --key <key>: key to sign the certificate with, defaults to ~/.ssh/id_ed25519"
			echo "  -h, --help: show this help message"
			echo "  -f, --force: force the renewal of the certificate even if it's expired"
			return 0
			;;
		-f | --force)
			FORCE=true
			shift
			;;
		-k | --key)
			key_file="$2"
			shift 2
			;;
		-c | --cert)
			file="$2"
			shift 2
			;;
		*)
			error "Unknown option: $1"
			;;
		esac
	done
	if [[ -z "${file:-}" ]]; then
		file="$HOME/.ssh/id_ed25519-cert.pub"
	fi
	if [[ "$file" == "-" ]]; then
		file="$(mktemp)"
		cat >"$file"
	fi
	cert_info="$(ssh-keygen -L -f "$file")"
	public_key_handle="$(echo "$cert_info" | grep 'Public key' | grep -oP '(?<=: ).*' | awk '{print $2}')"
	if [[ "$(ssh-add -l | grep '\-CERT)$' | grep -c "$(regex_escape "$public_key_handle")")" -gt 0 ]]; then
		info "Certificate is in the ssh-agent, removing it after successful renewal"
		old_cert="$(cat "$file")"
	fi
	key_id="$(echo "$cert_info" | grep 'Key ID' | grep -oP '(?<=: ").*(?=")')"
	principals=()
	while IFS=$'\n' read -r principal; do
		principals+=("$principal")
	done < <(echo "$cert_info" | ssh-util::cert/info/get_principals)
	date_line="$(echo "$cert_info" | grep 'Valid: from')"
	from="$(date "--date=$(echo "$date_line" | grep -oP '(?<=from ).*' | awk '{print $1}')" +%s)"
	to="$(date "--date=$(echo "$date_line" | grep -oP '(?<=to ).*' | awk '{print $1}')" +%s)"
	duration="$((to - from))"
	principal_string="$(join_by , "${principals[@]}")"
	new_cert="$(cert:sign -P "$principal_string" -i "$key_id" -t "+${duration}s" -k "$key_file" --output -)"
	echo "$new_cert" >"$file"
	if [[ -n "${old_cert:-}" ]]; then
		info "Removing old certificate from ssh-agent"
		if echo "$old_cert" | ssh-add -d -; then
			success "Successfully removed old certificate from ssh-agent"
			ssh-add
		else
			warning "Failed to remove old certificate from ssh-agent"
		fi
	fi
	if [[ "$file" == "-" ]]; then
		cat "$file"
		rm "$file"
	fi
}

ssh-util::desc cert/is-expired "Check if a ssh certificate is expired"
ssh-util::cert/is-expired() {
	file="$HOME/.ssh/id_ed25519-cert.pub"
	ttl=0
	while [[ "$#" -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			echo "Usage: cert is-expired [options] [cert-file]"
			echo "cert-file defaults to ~/.ssh/id_ed25519-cert.pub"
			echo "Options:"
			echo "  -h, --help: show this help message"
			echo "  -t, --ttl <seconds>: treshold for when to renew the certificate, defaults to $ttl"
			return 0
			;;
		-t | --ttl)
			ttl="$2"
			shift 2
			;;
		*)
			file="$1"
			shift
			;;
		esac
	done
	expire_secs="$(date --date "$(ssh-keygen -L -f "$file" | grep 'Valid: from' | grep -oP '(?<= to ).*$')" +%s)"
	now_secs="$(date +%s)"
	if [[ $((expire_secs - now_secs)) -lt $ttl ]]; then
		return 0
	else
		return 1
	fi
}

ssh-util::desc cert/verify "Verify a ssh certificate"
ssh-util::cert/verify(){
	while [[ "$#" -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			echo "Usage: cert is-expired [options] [cert-file]"
			echo "cert-file defaults to ~/.ssh/id_ed25519-cert.pub"
			echo "Options:"
			echo "  -h, --help: show this help message"
			echo "  -t, --ttl <seconds>: treshold for when to renew the certificate, defaults to 0"
			return 0
			;;
		-t | --ttl)
			ttl="$2"
			shift 2
			;;
		*)
			file="$1"
			shift
			;;
		esac
	done
	expire_secs="$(date --date "$(ssh-keygen -L -f "$file" | grep 'Valid: from' | grep -oP '(?<= to ).*$')" +%s)"
	now_secs="$(date +%s)"
	if [[ $((expire_secs - now_secs)) -lt $ttl ]]; then
		return 0
	else
		return 1
	fi
}

ssh-util::desc cert/clipboard "Sign cert in clipboard"
ssh-util::cert/clipboard(){
	while [[ "$#" -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			echo "Usage: cert clipboard [options]"
			echo "Options:"
			echo "  -h, --help: show this help message"
			return 0
			;;
		*)
			error "Unknown option: $1"
			;;
		esac
	done
	vis-clipboard --paste | ssh:cert -g sign -k - -o - "$@" | vis-clipboard --copy
}

ssh-util::desc cert/renew-if-expired "Renew a ssh certificate if it is expired"
ssh-util::cert/renew-if-expired() {
	file="$HOME/.ssh/id_ed25519-cert.pub"
	ttl=0
	while [[ "$#" -gt 0 ]]; do
		case "${1:-}" in
		-h | --help)
			echo "Usage: cert renew-if-expired [options] [cert-file]"
			echo "cert-file defaults to $file"
			echo "setting cert-file to - will read from stdin and write to stdout"
			echo "Options:"
			echo "  -h, --help: show this help message"
			echo "  -f, --force: force the renewal of the certificate even if it's expired"
			echo "  -t, --ttl <seconds>: treshold for when to renew the certificate, defaults to $ttl"
			return 0
			;;
		-f | --force)
			FORCE=true
			shift
			;;
		-t | --ttl)
			ttl="$2"
			shift 2
			;;
		*)
			error "Unknown option: $1"
			;;
		esac
	done
	if [[ "$file" == "-" ]]; then
		file="$(mktemp)"
		cat >"$file"
	fi
	if ssh-util::cert/is-expired --ttl "$ttl" "$file"; then
		ssh-util::cert/renew "$file"
		if [[ "$file" == "-" ]]; then
			cat "$file"
			rm "$file"
		fi
	fi
}

# Run main if not sourced
if [[ "$0" == "${BASH_SOURCE[0]}" ]]; then
	ssh-util "$@"
fi
